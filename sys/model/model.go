package model

import (
	"sync"
	"time"

	"github.com/liwei1dao/lego/sys/log"
	"github.com/liwei1dao/lego/sys/mgo"
	"github.com/liwei1dao/lego/sys/redis"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

func newSys(options *Options) (sys *Model, err error) {
	sys = &Model{
		options: options,
	}
	err = sys.init()
	return
}

type Model struct {
	options *Options
	Redis   redis.ISys
	Mgo     mgo.ISys
	mu      sync.RWMutex
	data    map[string]*ModelDataExpired //数据自动过期
}

func (this *Model) init() (err error) {
	if this.options.RedisIsCluster {
		this.Redis, err = redis.NewSys(
			redis.SetRedisType(redis.Redis_Cluster),
			redis.SetRedis_Cluster_Addr(this.options.RedisAddr),
			redis.SetRedis_Cluster_Password(this.options.RedisPassword))
	} else {
		this.Redis, err = redis.NewSys(
			redis.SetRedisType(redis.Redis_Single),
			redis.SetRedis_Single_Addr(this.options.RedisAddr[0]),
			redis.SetRedis_Single_Password(this.options.RedisPassword),
			redis.SetRedis_Single_DB(this.options.RedisDB),
		)
	}
	if err != nil {
		this.options.Log.Error(err.Error(), log.Field{Key: "options", Value: this.options})
		return
	}
	if this.Mgo, err = mgo.NewSys(
		mgo.SetMongodbUrl(this.options.MongodbUrl),
		mgo.SetMongodbDatabase(this.options.MongodbDatabase),
	); err != nil {
		this.options.Log.Error(err.Error(), log.Field{Key: "options", Value: this.options})
		return
	}
	return
}

func (this *Model) InsertModelLogs(table string, uid string, target interface{}) (err error) {
	data := &Autogenerated{
		ID:  primitive.NewObjectID().Hex(),
		UID: uid,
		Act: string(LogHandleType_Insert),
	}
	data.D = append(data.D, table)  // D[0]
	data.D = append(data.D, target) // D[1]

	_, err = this.Mgo.InsertOne(this.options.ModelLogTable, data)
	if err != nil {
		log.Errorf("table:%s insert model db err %v", table, err)
	}

	return err
}

func (this *Model) InsertManyModelLogs(table string, datas map[string]interface{}) (err error) {
	var (
		data []interface{}
	)
	for k, v := range datas {
		temp := &Autogenerated{
			ID:  primitive.NewObjectID().Hex(),
			UID: k,
			Act: string(LogHandleType_Insert),
		}
		temp.D = append(temp.D, table)            // D[0]
		temp.D = append(temp.D, []interface{}{v}) // D[1]
		data = append(data, temp)
	}

	_, err = this.Mgo.InsertMany(this.options.ModelLogTable, data)
	if err != nil {
		log.Errorf("table:%s insert model db err %v", table, err)
	}
	return err
}

func (this *Model) DeleteModelLogs(table string, uid string, where interface{}) (err error) {
	data := &Autogenerated{
		ID:  primitive.NewObjectID().Hex(),
		UID: uid,
		Act: string(LogHandleType_Delete),
	}

	data.D = append(data.D, table) // D[0]
	data.D = append(data.D, where) // D[1]

	_, err = this.Mgo.InsertOne(this.options.ModelLogTable, data)
	if err != nil {
		log.Errorf("table:%s insert model db err %v", table, err)
	}

	return err
}

func (this *Model) UpdateModelLogs(table string, uID string, where bson.M, target interface{}) (err error) {

	data := &Autogenerated{
		ID:  primitive.NewObjectID().Hex(),
		UID: uID,
		Act: string(LogHandleType_Update),
	}
	data.D = append(data.D, table)  // D[0]
	data.D = append(data.D, where)  // D[1]
	data.D = append(data.D, target) // D[2]

	_, err = this.Mgo.InsertOne(this.options.ModelLogTable, data)
	if err != nil {
		log.Errorf("table:%s insert model db err %v", table, err)
	}

	return err
}

//更新数据模块过期
func (this *Model) UpDateModelExpired(key string, childs map[string]struct{}, expired time.Duration) {
	this.mu.RLock()
	exp, ok := this.data[key]
	this.mu.RUnlock()
	if ok {
		if childs != nil {
			if exp.keys == nil {
				exp.keys = make(map[string]struct{})
			}
			for k, _ := range childs {
				exp.mu.Lock()
				exp.keys[k] = struct{}{}
				exp.mu.Unlock()
			}
		}
		exp.expired = time.Now().Add(expired)
	} else {
		exp = &ModelDataExpired{
			key:     key,
			keys:    childs,
			expired: time.Now().Add(expired),
		}
		this.mu.Lock()
		this.data[key] = exp
		this.mu.Unlock()
	}
}
